#関数: 入力と出力がある箱
#入出力の個数が一つとは限らない

#プログラミングにおける入力のことを引数(argument)という
#出力はreturn文で表す。return文以降は処理は行われない
#関数名は意味を考えて命名する


"""-------------------------------------------------------------------------------------------"""
#helloと言う関数を作りたい(0入力0出力)
def say_hello():
    print("hello")

a = say_hello() # None

#helloだけじゃなくて入力に応じて色々なことを言わせたい(1入力0出力)
def say_something(msg):
    print(msg)


"""-------------------------------------------------------------------------------------------"""
#xのy乗を計算する関数(2入力1出力)
def calc_pow(x, y):
    return x**y

calc_pow(2, 3) #8


"""-------------------------------------------------------------------------------------------"""
#奇数かどうか判断する関数
def is_odd(x):
    if x%2 == 1:
        return True
    return False

x = 9
if is_odd(x): print("xは奇数だ") #ちなみにインデント以降が一行のみの場合は改行なしで書くことができる
else: print("xは偶数だ")

#if x%2 == 1: print("xは奇数だ")
#else: ("xは偶数だ")
#こう書いても同じ挙動だが、あえて関数に切り出すことで処理の意味を理解しやすくしている

"""-------------------------------------------------------------------------------------------"""
#クラス内で定義される関数のことをメソッドという
#インスタンス生成時に呼ばれる初期化関数をコンストラクタと言うことがある


"""-------------------------------------------------------------------------------------------"""
#型ヒント
#入力と出力のデータ型を静的に宣言しておく

def is_odd(x:int) -> bool:
    if x%2 == 1:
        return True
    return False

#ただしpythonでは型ヒントと異なるデータ型が入出力されても文法上、構文上エラーは出ない
def fake_is_odd(x:list) -> str:
    if x%2 == 1:
        return True
    return False

"""-------------------------------------------------------------------------------------------"""
#スコープについて